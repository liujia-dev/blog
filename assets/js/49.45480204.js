(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{424:function(t,a,r){"use strict";r.r(a);var n=r(45),s=Object(n.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"spring-ioc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc"}},[t._v("#")]),t._v(" Spring IoC")]),t._v(" "),r("h2",{attrs:{id:"ioc-容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ioc-容器"}},[t._v("#")]),t._v(" IoC 容器")]),t._v(" "),r("p",[t._v("在Java应用程序中，对象在应用程序中均通过彼此依赖来实现功能。\nSpring通过IoC容器来管理所有Java对象(也称Bean)及其相互间的依赖关系。\n在Spring应用中，bean是由Spring IoC容器进行实例化，组装并受其管理的对象。\nbean和它们之间依赖关系反应在容器使用的配置元数据中。")]),t._v(" "),r("h2",{attrs:{id:"ioc控制反转"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ioc控制反转"}},[t._v("#")]),t._v(" IoC控制反转")]),t._v(" "),r("p",[t._v("控制反转是指在程序开发中，实例的创建不再由调用者管理，而是由 Spring 容器创建。Spring 容器会负责控制程序之间的关系，而不是由程序代码直接控制，因此，控制权由程序代码转移到了 Spring 容器中，控制权发生了反转。")])])}),[],!1,null,null,null);a.default=s.exports}}]);