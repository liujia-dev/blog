(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{308:function(t,a,s){t.exports=s.p+"assets/img/threelevel.a4b11ce9.png"},374:function(t,a,s){t.exports=s.p+"assets/img/danti.5e567cff.png"},417:function(t,a,s){"use strict";s.r(a);var e=s(45),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"传统单体应用架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#传统单体应用架构"}},[t._v("#")]),t._v(" 传统单体应用架构")]),t._v(" "),e("h2",{attrs:{id:"什么是单体应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是单体应用"}},[t._v("#")]),t._v(" 什么是单体应用")]),t._v(" "),e("p",[t._v("单体应用都是模块化设计,程序在编写完成后会被打包成一个应用并部署到服务器（如Tomcat）。\n一旦业务量的增加，我们只需增加服务器数量，并将打包好的应用部署到不同的服务器，然后通过负载均衡器\n如Nginx 实现应用的水平扩展。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(374),alt:"单体应用架构"}})]),t._v(" "),e("h2",{attrs:{id:"什么是单体应用架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是单体应用架构"}},[t._v("#")]),t._v(" 什么是单体应用架构")]),t._v(" "),e("p",[t._v("单体应用架构是指构成应用系统大的结构，单体应用架构采用的是三层架构。")]),t._v(" "),e("h2",{attrs:{id:"什么是三层架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是三层架构"}},[t._v("#")]),t._v(" 什么是三层架构")]),t._v(" "),e("p",[t._v("标准的三层架构包括视图层（View），业务逻辑层（Service），数据访问层（DAO）。")]),t._v(" "),e("ol",[e("li",[t._v("视图层：即View层，负责接收客户端请求并显示返回的请求数据。")]),t._v(" "),e("li",[t._v("业务层：即Service层，负责业务逻辑处理。")]),t._v(" "),e("li",[t._v("数据访问层：即DAO层，负责数据持久化，对数据库表进行增删改查等操作。")])]),t._v(" "),e("h2",{attrs:{id:"为什么采用三层架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么采用三层架构"}},[t._v("#")]),t._v(" 为什么采用三层架构")]),t._v(" "),e("p",[t._v("使用三层架构的目的在于层间解耦。在三层架构设计中，采用的是面向抽象编程。\n上层对下层的调用，是通过接口实现的。\n下层对上层的真正服务提供者，是下层接口的实现类。\n服务标准（接口）是相同的，服务提供者可以（实现类）更换。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(308),alt:"三层架构"}})])])}),[],!1,null,null,null);a.default=r.exports}}]);